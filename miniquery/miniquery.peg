package miniquery

type MiniQueryPeg Peg {
  *Tree
}


Grammar             <- _ Expression _ EndOfFile
Expression          <- LogicExpression

LogicExpression     <- NotExpression ( Logic NotExpression {p.PopLogic()})*
NotExpression       <- CompareExpression / _ "not" __ CompareExpression {p.PopNot()}
CompareExpression   <- CompareInExpression ( Compare CompareInExpression {p.PopCompare()})*
# Prevent confusion column in (1)
CompareInExpression   <- PredicateExpression ( _ <( "in" / "not" __ "in"  )> _ {p.AddCompare(text)} Array {p.PopCompare()} )?
PredicateExpression <- BetweenExpression ( Match {p.PopPredicate()})?
BetweenExpression   <- PrimaryExpression ( _ <("not" __)? 'between'> {p.AddOperation(text)} _ (Value _ "and" _ Value / '[' _ Value _ ',' _ Value _ ']') {p.PopBetween()})?
PrimaryExpression   <- '(' _ Expression _ ')' {p.PopParentheses()}
                    / Value
                    / Identifier ArgumentList {p.PopFunction()}
                    / Reference

ArgumentList        <- '(' _ {p.AddMark()} (Argument ( _ ',' _ Argument)* _ ','?)? _ ')' {p.PopArray()}
# support complex args
Argument            <- Expression
# Argument            <- Value / Identifier

Reference     <- IdentifierReference
              / JsonReference
              / Identifier
IdentifierReference <- {p.AddMark()} Identifier '.' Identifier ( '.' Identifier)* {p.PopIdentifierReference()}
JsonReference <- Identifier '->' (JsonReference / Identifier)
Identifier    <- !"not" <[a-zA-Z]([_a-zA-Z0-9])*> {p.AddName(text)}

Compare <- _ <( '>=' / '<=' / '==' / '!=' /  '>' / '<'  / '<>' / '=' )> _ {p.AddCompare(text)}
        / _ <( "gt" / "lt" / "gte" / "lte" / "eq" / "neq" )> _ {p.AddCompare(text)}
        / _ <( "like" / "not" __ "like" )> _ {p.AddCompare(text)}
        # / _ <( "in" / "not" __ "in"  )> _ {p.AddCompare(text)}

Logic <- _ <("and" / "or")> _ {p.AddLogic(text)}
      / _ <( '&&' / '||' )> _ {p.AddLogic(text)}

Match <- __ <'isnull' / 'notnull' / 'is' __ ('true'/'false'/'null') / 'is' __ 'not' __ ('true'/'false'/'null') > _ {p.AddMatch(text)}

Value         <- Literal / Array
# JS Array Syntax and Record syntax
Array         <- '[' {p.AddMark()} _ (Literal ( _ ',' _ Literal)* _ ','?)? _ ']' {p.PopArray()}
              /  '(' {p.AddMark()} _ (Literal ( _ ',' _ Literal)* _ ','?)? _ ')' {p.PopArray()}
Literal       <- String / Integer / Boolean / Null
Integer       <- <'0' / [1-9][0-9]*> {p.AddInteger(text)}
Boolean       <- <'true' / 'false' / 'TRUE' / 'FALSE'> {p.AddBoolean(text)}
Null          <- <'null'/'NULL'> {p.AddNull()}
String        <- "'" <[^']*> "'" {p.AddString(text)}/ '"' <[^"]*> '"' {p.AddString(text)}

SpaceComment  <- (Space / Comment)
_             <- SpaceComment*
__            <- SpaceComment+
Comment		    <- ('--' / '//') (!EndOfLine .)* EndOfLine
Space		      <- ' ' / '\t' / EndOfLine
EndOfLine	    <- '\r\n' / '\n' / '\r'
EndOfFile	    <- !.
